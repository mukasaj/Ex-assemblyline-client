name: tests

trigger: ["*"]
pr: ["*"]

schedules:
  - cron: "0 6 * * 1" # Every monday morning
    displayName: Weekly build
    branches:
      include:
        - master
    always: true

pool:
  vmImage: 'ubuntu-18.04'

resources:
  containers:
  - container: redis
    image: redis
    ports:
      - 6379:6379
  - container: elasticsearch
    image: cccs/elasticsearch:7.6.0
    env:
      ES_JAVA_OPTS: "-Xms256m -Xmx512m"
      DISCOVERY_TYPE: 'single-node'
    ports:
      - 9200:9200
  - container: minio
    image: cccs/minio
    env:
      MINIO_ACCESS_KEY: al_storage_key
      MINIO_SECRET_KEY: Ch@ngeTh!sPa33w0rd
    ports:
      - 9000:9000

jobs:
- job: run_test
  strategy:
    matrix:
      python3_6:
        python.version: '3.6'
      python3_7:
        python.version: '3.7'
      Python3_8:
        python.version: '3.8'

  timeoutInMinutes: 10
  services:
    elasticsearch: elasticsearch
    redis: redis
    minio: minio

  steps:
    - task: UsePythonVersion@0
      displayName: Set python version
      inputs:
        versionSpec: '$(python.version)'
    - script: |
        set -x  # Echo commands before they are run
        # Run the container pulls in parallel, wait for them all to finish before next step
        sudo docker pull -q cccs/nginx-ssl &
        sudo docker pull -q cccs/assemblyline-ui:latest &
        sudo docker pull -q cccs/assemblyline-socketio:latest &
        wait
      displayName: Pull Containers
    - script: |
        set -x  # Echo commands before they are run
        # Install configuration file
        sudo mkdir -p /etc/assemblyline/
        sudo cp pipelines/config.yml /etc/assemblyline/
        # Start service containers that can't be started by azure properly
        sudo docker run -d --name nginx --network host --restart on-failure -e "UI_HOST=localhost" -e "SOCKET_HOST=localhost" -e "TEMPLATE=minimal" -e "FQDN=localhost" cccs/nginx-ssl
        sudo docker run -d --name alui --network host -e "WORKERS=1" -e "THREADS=1"  -v "/etc/assemblyline/config.yml":"/etc/assemblyline/config.yml" cccs/assemblyline-ui:latest
        sudo docker run -d --name alsocketio --network host  -v "/etc/assemblyline/config.yml":"/etc/assemblyline/config.yml" cccs/assemblyline-socketio:latest
        # Install depedency packages
        sudo apt-get update
        sudo apt-get install -y build-essential libffi-dev libfuzzy-dev python3-dev wget
        # Wait for the service containers to come online
        wget https://localhost --no-check-certificate --timeout=2 --retry-on-http-error=502 --waitretry=10 --retry-connrefused
      displayName: Setup Environment
    - script: |
        sudo env "PATH=$PATH" python -m pip install --no-cache-dir -e . -r test/requirements.txt
      displayName: Install assemblyline_client
    - script: |
        pytest -rsx -vv
      displayName: Test
